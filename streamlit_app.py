import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import io
import warnings

# Pour √©viter les messages d'avertissement
warnings.filterwarnings('ignore')

# Charger les donn√©es avec cache pour am√©liorer les performances
@st.cache_data
def load_data():
    urls = {
        "etablissement": 'https://raw.githubusercontent.com/ChristopheMontoriol/French_Industry_Janv24/main/data/base_etablissement_par_tranche_effectif.csv',
        "geographic": 'https://raw.githubusercontent.com/ChristopheMontoriol/French_Industry_Janv24/main/data/name_geographic_information.csv',
        "salaire": 'https://raw.githubusercontent.com/ChristopheMontoriol/French_Industry_Janv24/main/data/net_salary_per_town_categories.csv'
    }
    etablissement = pd.read_csv(urls['etablissement'], sep=',')
    geographic = pd.read_csv(urls['geographic'], sep=',')
    salaire = pd.read_csv(urls['salaire'], sep=',')
    return etablissement, geographic, salaire

etablissement, geographic, salaire = load_data()

# Pr√©-traitement des donn√©es salaire
new_column_names_salaire = {
    'SNHM14': 'salaire',
    'SNHMC14': 'salaire_cadre',
    'SNHMP14': 'salaire_cadre_moyen',
    'SNHME14': 'salaire_employe',
    'SNHMO14': 'salaire_travailleur',
    'SNHMF14': 'salaire_femme',
    'SNHMFC14': 'salaire_cadre_femme',
    'SNHMFP14': 'salaire_cadre_moyen_femme',
    'SNHMFE14': 'salaire_employe_femme',
    'SNHMFO14': 'salaire_travailleur_femme',
    'SNHMH14': 'salaire_homme',
    'SNHMHC14': 'salaire_cadre_homme',
    'SNHMHP14': 'salaire_cadre_moyen_homme',
    'SNHMHE14': 'salaire_employe_homme',
    'SNHMHO14': 'salaire_travailleur_homme',
    'SNHM1814': 'salaire_18-25',
    'SNHM2614': 'salaire_26-50',
    'SNHM5014': 'salaire_+50',
    'SNHMF1814': 'salaire_18-25_femme',
    'SNHMF2614': 'salaire_26-50_femme',
    'SNHMF5014': 'salaire_+50_femme',
    'SNHMH1814': 'salaire_18-25_homme',
    'SNHMH2614': 'salaire_26-50_homme',
    'SNHMH5014': 'salaire_+50_homme'
}

salaire = salaire.rename(columns=new_column_names_salaire)
salaire['CODGEO'] = salaire['CODGEO'].str.lstrip('0').str.replace('A', '0').str.replace('B', '0')

# Configuration de la barre lat√©rale
st.sidebar.title("Sommaire")
pages = ["üëã Intro", "üîç Exploration des donn√©es", "üìä Data Visualisation", "üß© Mod√©lisation", "üîÆ Pr√©diction", "üìå Conclusion"]
page = st.sidebar.radio("Aller vers", pages)

# Affichage de la s√©lection des donn√©es uniquement pour la page "Exploration des donn√©es"
if page == pages[1]:
    # Gestion de l'√©tat de la page via session_state
    if 'page' not in st.session_state:
        st.session_state.page = "Etablissement"

    # S√©lection de la page de donn√©es
    data_pages = ["Etablissement", "Geographic", "Salaire"]
    # st.sidebar.markdown("### Choix des donn√©es")
    st.session_state.page = st.sidebar.selectbox("S√©lection du Dataframe", data_pages, index=data_pages.index(st.session_state.page))

st.sidebar.markdown(
    """
    - **Cursus** : Data Analyst
    - **Formation** : Formation Continue
    - **Mois** : Janvier 2024
    - **Groupe** : 
        - Christophe MONTORIOL
        - Issam YOUSR
        - Gwilherm DEVALLAN
        - Yacine OUDMINE
    """
)

# D√©finition des styles
st.markdown("""
    <style>
        h1 {color: #4629dd; font-size: 70px;}
        h2 {color: #440154ff; font-size: 50px;}
        h3 {color: #27dce0; font-size: 30px;}
        body {background-color: #f4f4f4;}
    </style>
""", unsafe_allow_html=True)

# Page d'introduction
if page == pages[0]:
    st.header("üëã Intro")
    st.caption("""**Cursus** : Data Analyst | **Formation** : Formation Continue | **Mois** : Janvier 2024 """)
    st.caption("""**Groupe** : Christophe MONTORIOL, Issam YOUSR, Gwilherm DEVALLAN, Yacine OUDMINE""")
     # Ajouter l'image du bandeau
    st.image('https://raw.githubusercontent.com/ChristopheMontoriol/French_Industry_Janv24/main/data/Bandeau_FrenchIndustry.png', use_column_width=True)
    st.write("""
        L‚Äôobjectif premier de ce projet est d‚Äôobserver et de comprendre quelles sont les in√©galit√©s salariales en France. 
        √Ä travers plusieurs jeux de donn√©es et plusieurs variables (g√©ographiques, socio-professionnelles, d√©mographiques, mais aussi du nombre d‚Äôentreprises par zone), 
        il sera question dans ce projet de mettre en lumi√®re les facteurs d‚Äôin√©galit√©s les plus d√©terminants et de recenser ainsi les variables qui ont un impact significatif sur les deltas de salaire.
        En plus de distinguer les variables les plus d√©terminantes sur les niveaux de revenus, l‚Äôobjectif de cette √©tude sera de construire des clusters ou des groupes de pairs bas√©s sur les niveaux de salaire similaires.
        Enfin, un mod√®le de Machine Learning sera cr√©√© pour pr√©dire au mieux un salaire en fonction des variables disponibles dans les jeux de donn√©es.
    """)

# Page d'exploration des donn√©es
elif page == pages[1]:
    st.header("üîç Exploration des Donn√©es")

    # Fonction pour afficher les informations des DataFrames
    def afficher_info(dataframe, name):
        st.write(f"### {name}")
        st.write("#### Aper√ßu")
        st.write(dataframe.head())
        
        st.write("#### Informations")
        buffer = io.StringIO()
        dataframe.info(buf=buffer)
        st.text(buffer.getvalue())
        
        st.write("#### Statistiques")
        st.write(dataframe.describe())

    # Affichage des informations en fonction de la page s√©lectionn√©e
    if st.session_state.page == "Etablissement":
        afficher_info(etablissement, "Etablissement")
    elif st.session_state.page == "Geographic":
        afficher_info(geographic, "Geographic")
    elif st.session_state.page == "Salaire":
        afficher_info(salaire, "Salaire")

# Page de Data Visualisation
elif page == pages[2]:
    st.header("üìä Data Visualisation")

    st.subheader("Disparit√© salariale homme/femme")
    
    # Menu d√©roulant pour la disparit√© salariale
    disparite_options = ["Disparit√© salariale par cat√©gorie socioprofessionnelle", "Disparit√© salariale par tranche d'√¢ge"]
    disparite_choice = st.selectbox("S√©lectionnez une visualisation pour la disparit√© salariale :", disparite_options)
    
    # Visualisation en fonction du choix de l'utilisateur pour la disparit√© salariale
    if disparite_choice == disparite_options[0]:
        # Disparit√© salariale par cat√©gorie socioprofessionnelle
        categories = ['Cadres', 'Cadres moyens', 'Employ√©s', 'Travailleurs']
        disparites = [17.60531468314386, 9.887706605652797, 2.472865187964315, 14.680015141858643]

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.bar(categories, disparites, color='skyblue')

        ax.set_title('Disparit√© salariale par cat√©gorie socioprofessionnelle')
        ax.set_xlabel('Cat√©gorie socioprofessionnelle')
        ax.set_ylabel('Disparit√© salariale (%)')

        plt.xticks(rotation=45)
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        st.pyplot(fig)

    elif disparite_choice == disparite_options[1]:
        # Disparit√© salariale par tranches d'√¢ge
        tranches_age = ['18-25 ans', '26-50 ans', 'Plus de 50 ans']
        disparites_age = [4.286591078294969, 11.745237278240928, 20.02852196164705]

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.bar(tranches_age, disparites_age, color='lightgreen')
        ax.set_title('Disparit√© salariale par tranche d\'√¢ge')
        ax.set_xlabel('Tranche d\'√¢ge')
        ax.set_ylabel('Disparit√© salariale (%)')
        plt.xticks(rotation=45)
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        st.pyplot(fig)

    st.subheader("Comparaison de salaire homme/femme")

    # Menu d√©roulant pour la comparaison des salaires entre hommes et femmes
    comparaison_options = ["Comparaison par cat√©gorie socioprofessionnelle", "Comparaison par tranche d'√¢ge"]
    comparaison_choice = st.selectbox("S√©lectionnez une visualisation pour la comparaison des salaires :", comparaison_options)
    
    # Visualisation en fonction du choix de l'utilisateur pour la comparaison des salaires
    if comparaison_choice == comparaison_options[0]:
        # Bo√Æte √† moustaches pour chaque cat√©gorie socioprofessionnelle : Hommes et femmes 
        salaires_hommes = salaire[['salaire_cadre_homme', 'salaire_cadre_moyen_homme', 'salaire_employe_homme', 'salaire_travailleur_homme']]
        salaires_femmes = salaire[['salaire_cadre_femme', 'salaire_cadre_moyen_femme', 'salaire_employe_femme', 'salaire_travailleur_femme']]

        fig, ax = plt.subplots(figsize=(10, 6))

        # Bo√Æte √† moustaches pour les salaires des hommes
        ax.boxplot([salaires_hommes[col] for col in salaires_hommes.columns], positions=[1, 2, 3, 4], widths=0.4, labels=salaires_hommes.columns, boxprops=dict(color="blue"))

        # Bo√Æte √† moustaches pour les salaires des femmes
        ax.boxplot([salaires_femmes[col] for col in salaires_femmes.columns], positions=[1.4, 2.4, 3.4, 4.4], widths=0.4, labels=salaires_hommes.columns, boxprops=dict(color="red"))

        ax.set_title('Comparaison des salaires entre hommes et femmes pour chaque cat√©gorie socioprofessionnelle')
        ax.set_xlabel('Cat√©gorie socioprofessionnelle')
        ax.set_ylabel('Salaire')
        plt.xticks([1.2, 2.2, 3.2, 4.2], ['Cadre', 'Cadre moyen', 'Employ√©', 'Travailleur'])
        ax.grid(True)
        st.pyplot(fig)

    elif comparaison_choice == comparaison_options[1]:
        # Bo√Æte √† moustaches pour chaque tranche d'√¢ge : Hommes et femmes 
        salaires_hommes = salaire[['salaire_18-25_homme', 'salaire_26-50_homme', 'salaire_+50_homme']]
        salaires_femmes = salaire[['salaire_18-25_femme', 'salaire_26-50_femme', 'salaire_+50_femme']]

        fig, ax = plt.subplots(figsize=(10, 6))

        # Bo√Æte √† moustaches pour les salaires des hommes
        ax.boxplot([salaires_hommes[col] for col in salaires_hommes.columns], positions=[1, 2, 3], widths=0.4, labels=salaires_hommes.columns, boxprops=dict(color="blue"))

        # Bo√Æte √† moustaches pour les salaires des femmes
        ax.boxplot([salaires_femmes[col] for col in salaires_femmes.columns], positions=[1.4, 2.4, 3.4], widths=0.4, labels=salaires_hommes.columns, boxprops=dict(color="red"))

        ax.set_title("Comparaison des salaires entre hommes et femmes pour chaque tranche d'√¢ge")
        ax.set_xlabel("Tranche d'√¢ge")
        ax.set_ylabel('Salaire')
        plt.xticks([1.2, 2.2, 3.2], ['18-25 ans', '26-50 ans', 'Plus de 50 ans'])
        ax.grid(True)
        st.pyplot(fig)


# Page de Mod√©lisation
elif page == pages[3]:
    st.header("üß© Mod√©lisation")
    st.subheader("Objectif")
    st.write("Pr√©dire le salaire net moyen en fonction des features.")
    
    if st.button("Mod√®les √©tudi√©s") :
        st.subheader("Liste des mod√®les")
        st.markdown("""
                    Afin de d√©terminer le plus performant possible, nous avons √©tudi√© plusieurs mod√®les de machine learning:
                    - R√©gression lin√©aire
                    - For√™t al√©atoire
                    - Clustering
        """)


        st.subheader("Ex√©cution des mod√®les")
        st.markdown("""
                    Pour chaque mod√®le appliqu√©, nous avons suivi les √©tapes suivantes :
                    1. Instanciation du mod√®le.
                    2. Entrainement du mod√®le sur l'ensemble du jeu d'entra√Ænement X_train et y_train.
                    3. Pr√©dictions sur l'ensemble du jeu de test X_test et y_test.
                    4. Evaluation de la performance des mod√®les en utilisant les m√©triques appropri√©es.
                    5. Interpr√©tation des coefficients pour comprendre l'impact de chaque caract√©ristique sur la variable cible.
                    6. Optimisation du mod√®le : variation des param√®tres, s√©lection des features utilis√©es, discr√©tisation des valeurs.
                    7. Visualisation et analyse des r√©sultats.
                """)
    if st.button("Mod√®le retenu") :
        data = {
        'Mod√®les': ['For√™t al√©atoire sans optimisation', 'For√™t al√©atoire avec optimisation',  'For√™t al√©atoire avec ratio H/F','For√™t al√©atoire avec discr√©tisation','R√©gression lin√©aire 1','R√©gression lin√©aire 2'],
        'R¬≤ train': [0.9994,0.9441,0.9491,0.9456,0.9993,0.9946],
        'R¬≤ test': [0.9977,0.8892,0.9376,0.9140,0.9996,0.9938],
        'MSE test': [0.0117, 0.5903,0.3755,0.4577,0.0022,0.0344],
        'MAE test': [0.0747,0.5250,0.4523,0.5240,0.0377,0.1319],
        'RMSE test': [0.1084,0.7683, 0.6127,0.6765,0.0474,0.1855]
        }

        
        # Cr√©ation du DataFrame
        tab = pd.DataFrame(data)
        tab.index = tab.index #+ 1
        # Trouver l'index de la ligne correspondant √† "For√™t al√©atoire avec discr√©tisation"
        rf_index = tab[tab['Mod√®les'] == 'For√™t al√©atoire avec discr√©tisation'].index

        # Appliquer un style personnalis√© √† la ligne sp√©cifique
        styled_tab = tab.style.apply(lambda x: ['background: #27dce0' if x.name in rf_index else '' for i in x], axis=1)


        # Afficher le tableau avec le style appliqu√©
        st.subheader("Synth√®se des m√©triques de performance")
        st.table(styled_tab)
        st.markdown("""
                        ##### Choix du mod√®le :
                        - Les mod√®les de r√©gression linaires 1 & 2 font de l'overfitting m√™me apr√®s optimisation.                     
                        Ils sont donc disqualifi√©s.
                        - Crit√®res de choix pour le mod√®le For√™t al√©atoire :                    
                        Les R¬≤ ne montrent pas d'overfitting et sont proches de 0.9.                                
                        Les erreurs restent acceptables.
                        """)
        st.write("")
        st.write("#### Mod√®le retenue : For√™t al√©atoire avec discr√©tisation.")


    if st.button("Evaluation graphique du mod√®le") :
 
        st.subheader("Dispersion des r√©sidus & distributions des r√©sidus")
        image_qqplot = "https://zupimages.net/up/24/35/r6ed.png"
        st.image(image_qqplot, use_column_width=True)

        st.write("")
        st.write("")

        st.subheader("Comparaison des predictions VS r√©elles & QQ plot des r√©sidus")
        image_cumul_residus = "https://zupimages.net/up/24/35/t9c6.png"
        st.image(image_cumul_residus, use_column_width=True)
        
        st.markdown("""
                    ##### Conclusions :         
                    - Distributions relativement centr√©es autour de z√©ro
                    - Distribution normale des r√©sidus
                    - Tr√®s peu de points au dela de +/-2
                    - Les r√©sultats obtenus sont plutot uniformes pour toute la plage des donn√©es
                    """)
        
        st.write("")
        st.write("")



# Page de Pr√©diction
elif page == pages[4]:
    st.header("üîÆ Pr√©diction")
    st.subheader('Simulation de Pr√©diction avec Random Forest Regressor')

# Page de Conclusion
elif page == pages[5]:
    st.header("üìå Conclusion")
    st.write("**Conclusion**")



